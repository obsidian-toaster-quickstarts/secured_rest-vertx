apiVersion: v1
kind: List
items:
- apiVersion: v1
  kind: Secret
  metadata:
    name: sso-app-secret
  data:
    keystore.jks: "/u3+7QAAAAIAAAABAAAAAQAFamJvc3MAAAFShRzrOgAABQEwggT9MA4GCisGAQQBKgIRAQEFAASCBOmDfoVpQxGg4sIk+si6Fl16ZJDq+8FzpEtqsYLEzwmUHe/UMviPkxiH1FRwNzZ0axZ8uvI/zM73xGEYgAyFnVnEbxOf9llHJBbo1LNm7vLlhkVMRQLw6IM9GQVQGMRp40yWyd16+8NHWX1fC8TwduN0bkl8Sv50/meyEimyaM3WGiyfi1KqFNO2TaUAZNHMEWtsgb0BnoQRXQ9BX4HMSm71Kc4+LlvDfbGpRkSQ5hB4jwWf0vHTVualysOV7LdzLWXs/qvHKPpbZtBnXczDW20LJevoTYkjrS80ew/Jpj6z640OxGj1rpH+a4cRN1WkSfYo27zJf4p021fqFtNays3o4jegUK2oXTCZ4ZWIhk4sL/+dBlt3+pKaMst6h4tpdWPUqa7yZuOokl5Y9agA4Z8aBjj4w6VCReNYHVLayvk4V9E5w9cafVguzfKTlWFfUh40nQwkfIXXau+C4HICXCaECXLOju3/0oRqFaC2F6p1Tvkl+poaO+MnC4ShgOXVgOgQSO6FrYtSQzMbp0yWHBQsXLSks1Z48z9zlz4eSQMlV+f3EkIioD+Yb0uUI7fOrFfBUfSOKDJoDg51UVSRBY7Jko4BqCHeFnAnCCwxA0wQbd1HGAUlXJk2xL4M11vGQyOijmWKR0fp5g/ngKyJoDUhwwXYq2jONlbVxWghqoAnvkwzEkkCC1jWErM2lv66EVUfFYRZ/FuVIC2tUOTKs+ZcY7P6ya9F1OOpiQX80JtXL71OR1xqMqyelnoEeH1SymSlIPV8HpzVXzQtqVTgqMiqxDmv+JZMl5jjuFW6oQq26UN/H1oYIZyQDHSL4FunAPh983+wLzjj/Q2dVTZT12md/JTTdozTb0vozbTWGOdTTO+SV7DXyPUQg6xz0stL/6HsLhpVzZBJnufIr7MPl7O9AxI0KdaD4JeFuk63tqMfMSdt5s8D7qcSKuMFzh648NNwoZOFwyn9rIEMw99D9fCybqoLNAuefFialQfimF1jv9wZWriRt7YstUvYC2aZZmGmeUBklrEx77gWaghT+HJv7Dfr4uFw4a6lbpb21aknPx0JmfxmdkyH5sRG2MUojV7LYs3WEhC3UvHWR6MczFWcG7JpC2RYx36R5IIYOD6164erIOUCIETabRjyq2xzXgnkcV8mUI6IKMM62gBi+6HxG/Ls2blKx2hZJeOTiHOVzjV3gZ6VB7Gu9BfAW5bPZMOq7/Z+hQ4xdhf6JPOoRKcieb6CU+LjthZycaEDjvoekessmkgFjX/tMtM9ARjxwwlLtUO0wQRrVETVmxCO0cPHa+UIPgFcAGa9gOlIjYEZmwBRW8tCjCgHKXJXVymQHuBAu6nSmYu/26lbaz7S0a+4yD027KvD7y88ZGH22Uf/bjsPvnRvttIl+p0OHX7qzdaFd2Qfz3P7/vyNoK0vw/kZLXuVbEPkKCYVqFwm1MO5GjrDikOMSb7hm+9PLg4k3Ib80OVv9gJ47hn5QotivHnat02Ga89jsVCN6oxplL5bymQCzsV1wtFEkUzhnyRunvfZ1Z/Z22DouR27fltvbzxC4VMQ+cDZpxVxk4WowgRNP4oLSb08LQoMvIKx54uTu/IBmZxJinvOX11ODtKMgEdHFPEfNgNFSgvIdqo6H0h7w4KxelJT8IxPt3ZvoILX9+0MLrxCE6HSg0oAAAABAAVYLjUwOQAAA0MwggM/MIICJ6ADAgECAgR29XPcMA0GCSqGSIb3DQEBCwUAMFAxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTELMAkGA1UEBxMCU0QxCzAJBgNVBAoTAlJIMQswCQYDVQQLEwJDRTENMAsGA1UEAxMEQmlsbDAeFw0xNjAxMjcyMjAzMjdaFw0xNjA0MjYyMjAzMjdaMFAxCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTELMAkGA1UEBxMCU0QxCzAJBgNVBAoTAlJIMQswCQYDVQQLEwJDRTENMAsGA1UEAxMEQmlsbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKuWH7G9DWZrnnW64VVrck1BjBGEWYMVDCVI8ADklap1UT1DHfdZ1CywMDtxOShp+8ZBO6gVfOoBmJ8SAd6roHFI9/N4X4Sl3VLfL/i6HEsxDIhI06bi8VbqzrrM3M6zlhG9B/JaVHkurWwsc2sxkgiGEO1bfYk+26LEM5LD3hmnFtQ7B8Cw5/Qpi0IPUe3gqQvSeAoeXhHtFsD0FgrnF1OwBh5pyG+T9SPJov/iyV9OQMg6QrtOGL/BtAAiqkFGdXOuNWSoOZTBFtq3L8HSwQl0n9Z2QC7X2pgclUbMJQsgc0gwAjCzXscxyDdW0qHLBsvvtghEGRN0BEYO3X4/Au0CAwEAAaMhMB8wHQYDVR0OBBYEFGt3cWZ4Bu0zb9CUY5lJq97rD3cWMA0GCSqGSIb3DQEBCwUAA4IBAQAKF2D2ajXngELf5iNNBOjdexYo7mWAsrD5Eep57oBil440Uoz5pB44hljQ3ItOZz7pyOoF3R+Gx4k5zLykqyU+WYF8PaMHsV6j+/+++dwyVMiIJxdkxPgcGrh/+LEFuSa6aTlyg8A2sHJiQcluJ4Ktn6/X5Yz8JD/h3TrEv8qKUgE719EE+Drqk3hxQxLzYx3v63uvQAWJ7zmk6dFLdLDHYCnrwe0E50Jzd0ZKd/M4ZStFPWqLDajhm9mOaBgU3HmpNoJYMXq+forhGPIF1QttZEoLZhaTzxDh3xvFPBb06rT2pja5mEDQtJR9eJ47H72W5UI8INqohqRK662r/F/bObGzQmqxXoafHVUvT0IS40Rn8GA="
    jgroups.jceks: zs7OzgAAAAIAAAABAAAAAwAKc2VjcmV0LWtleQAAAVDQhuHmrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAAPMA0ECHcwLGK6EDyLAgEUdXEAfgAFAAAAmCu9wRKf1aYYUOEWe406ncPtIdm3147G7MJyWUu2kJVY15a2QxeZi9w5J3AF6T64CvylUuQjpcC4DWXwVn9BefntkBR8CzTiH7VxEqVOQ/OkFS29Inoq8t7/NBaTgTdmMkb4ETV1gIsy/+W6kk7QTqxItCkdKKGFE90Be/7yL3tG16TCy/ABKl7CO6PHa44CqK2PUE1oaJ+WdAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVMN658veJP01V2j9y8bQCYIzViutw==
- apiVersion: v1
  kind: Secret
  metadata:
    name: sso-demo-secret
  data:
    sso-demo.json: WwogIHsKICAgICJpZCI6ICJkZW1vIiwKICAgICJyZWFsbSI6ICJkZW1vIiwKICAgICJkaXNwbGF5TmFtZSI6ICJyaC1zc28iLAogICAgImRpc3BsYXlOYW1lSHRtbCI6ICI8c3Ryb25nPlJlZCBIYXQ8L3N0cm9uZz48c3VwPsKuPC9zdXA+IFNpbmdsZSBTaWduIE9uIiwKICAgICJub3RCZWZvcmUiOiAwLAogICAgInJldm9rZVJlZnJlc2hUb2tlbiI6IGZhbHNlLAogICAgImFjY2Vzc1Rva2VuTGlmZXNwYW4iOiA2MDAsCiAgICAiYWNjZXNzVG9rZW5MaWZlc3BhbkZvckltcGxpY2l0RmxvdyI6IDkwMCwKICAgICJzc29TZXNzaW9uSWRsZVRpbWVvdXQiOiAxODAwLAogICAgInNzb1Nlc3Npb25NYXhMaWZlc3BhbiI6IDM2MDAwLAogICAgIm9mZmxpbmVTZXNzaW9uSWRsZVRpbWVvdXQiOiAyNTkyMDAwLAogICAgImFjY2Vzc0NvZGVMaWZlc3BhbiI6IDYwLAogICAgImFjY2Vzc0NvZGVMaWZlc3BhblVzZXJBY3Rpb24iOiAzMDAsCiAgICAiYWNjZXNzQ29kZUxpZmVzcGFuTG9naW4iOiAxODAwLAogICAgImVuYWJsZWQiOiB0cnVlLAogICAgInNzbFJlcXVpcmVkIjogImV4dGVybmFsIiwKICAgICJyZWdpc3RyYXRpb25BbGxvd2VkIjogZmFsc2UsCiAgICAicmVnaXN0cmF0aW9uRW1haWxBc1VzZXJuYW1lIjogZmFsc2UsCiAgICAicmVtZW1iZXJNZSI6IGZhbHNlLAogICAgInZlcmlmeUVtYWlsIjogZmFsc2UsCiAgICAicmVzZXRQYXNzd29yZEFsbG93ZWQiOiBmYWxzZSwKICAgICJlZGl0VXNlcm5hbWVBbGxvd2VkIjogZmFsc2UsCiAgICAiYnJ1dGVGb3JjZVByb3RlY3RlZCI6IGZhbHNlLAogICAgIm1heEZhaWx1cmVXYWl0U2Vjb25kcyI6IDkwMCwKICAgICJtaW5pbXVtUXVpY2tMb2dpbldhaXRTZWNvbmRzIjogNjAsCiAgICAid2FpdEluY3JlbWVudFNlY29uZHMiOiA2MCwKICAgICJxdWlja0xvZ2luQ2hlY2tNaWxsaVNlY29uZHMiOiAxMDAwLAogICAgIm1heERlbHRhVGltZVNlY29uZHMiOiA0MzIwMCwKICAgICJmYWlsdXJlRmFjdG9yIjogMzAsCiAgICAicHJpdmF0ZUtleSI6ICJNSUlFb3dJQkFBS0NBUUVBb0VUblBtTjU1eEJKalJ6Ti9jczMwT3pKOW9sa3RlTFZOUmp6ZFR4Rk95UnRTMm92RGZ6ZGhoTzlYelVjVE1iSXNDT0FadFN0OEsrNnl2Qlh5cE9TWXZJNzVFVWR5cG1rY0sxS29wdHFZNUtFQlExS3doV3VQN0lXUTBmc2hVd0Q2akkxUVdEZkd4Zk0vaDM0RnZFbi8wdEo3MXhOMlA4VEkyWWFud3VEWmdvc2RvYngvUEF2bEdSRUJHdWs0QmdtZXhUT2tBZG5GeElVUWNDa2lFWjJDNDF1Q3J4aVM0Q0VlNU9YOTFhSzlIS1pWNFpKWDZ2bnFNSG1kRG5zTWRPK1VGdHhPQllaaW8rYTFqUDRXM2Q3SjVmR2VpT2FYalFDT3BpdktuUDJ5VTJEUGRXbURNeVZiNjdsOERSQStqaDBPSkZLWjVIMmZOZ0UzSUk1OXZkc1J3SURBUUFCQW9JQkFRQ1RIMDFyM3lOcmNtOGlZOXZRNjdrY1NCSUtDQXYwVC90S2w5SDl2OHNKeEtHMEJoQ1Y5WmRoV2tPUDM1QlFCbmI2QWt6L21LTG4vRmtyckQvYkRXYm0vOWpzN21tdnJ5VGQ3cVpCNlF0YnhvYjhvRHdOT0p2Uml1aVc4TEoxbHRkTktMUHNoVUdwZkVySXg3Z1RUMk5aSHNNTFFKK1I0RzJ3SkMyeDdINjlyb3F3S3NRalVGZldiOERmcDR4USs0M2Y5NklZS3dvUDZaN0UwVk9mN2FJT1M5eW5ZMEFZY2JMR1VkelU4TDdOOG5qSW96L0pHM1pBRGg1RTlmckJnam4rS3BhOUJxVXRJQU01NDRSdlk3R1BxbFNXa2Q1SzVxOXBDNVdsRVlTZ0QweTh1NWpXVjMxejZ3TzVrY0p5SlN2aU41TDJUOHUyVndCRnJMdTBOVDM1QW9HQkFOWml1allZK0V2WnBBOTVzRkxXdE5RZWJlcUhpNmlLL0xEWVZCQXczY2dsUjNQcGp0cDRMQndMa0NValhFdkJsSmtDRFZEdmlKQUdiMVBTUUlBblB3bU9zMmNQUGh0VkI1VVBVUS91SlgrOGhFWjZXbEpkQUFDZnl1QnZOVlQ2eGxDODhjWmw4Q0FUT0N0N3JJWm40U29sa1J0dzBaQWp4emZtVDlkRnRCbHpBb0dCQUw5aEEzZkk3OXJpUHRrL2dvakhOeFNjbm5DSGpxcWJlTTBCQWltT0RiKzd5ZzlvdHBjT2JGallvNGpidVZBWDVYRE10RmVXajlocXZrRTFUR2VqcXZOTVpvc1dNaEpOcVh2K0RGa3hCdTY0RlhnV3ppSUJuYkpoc3RKenRYL2RTMDBmeWNjdEJnUWRVWE1hM3J0R0w3bFRkejJEVjN5T003OFM3cmVKdjd6ZEFvR0FKOUUyWEkzT3IrZkFQTStSSEJHY2pEa0ttU0NMbzhZTW9Kdk5JU1N5VEZZQUsxc1ptU0h3cjFUR2ROOVlhUW1QRzh2eHhUSjMzcWdUVFRJam9LbXBYNUVOYVBxL3dqdk1xTGFyaTVYamlSSHVUMWl5SmRINENpV2pmSU9yR0JscmM5dGozRUZhazlwOStEV0VHWUo1bzJaT3lSWHZGaUpQQWViWXRWYlEyRmtDZ1lCM0xrWkhtWVh0ak1uUTV5RTJac0doZjJ1WDdvTmxNYzhIOCtIUjJSb3MxaGllZ2ZwN2xjclpoWWhLR1hPTk1tUjdXNi9QZi83eXFuN3pBdXNpKzZUaFFTbjI0Z3FxcFZ5dnorVUd3bVpyMFkzbExHYVFmT3NsQkh5bFhOT2gza0VmdFhVbUtaNitmemVTOUIvVEJvRi82eit0dWhhSWhkSXA0dk53cjBNTnJRS0JnQllWZTBFUnE1Z1RHVFY5OXdJaytqNHk5YVZ3Yi9uSnVNb3oyT0ZkZVJxSy81UEZ6TWlkZjgyU0E1NkNPQTNYTmVBSVBicTRCbS8wYWhZdm1Ob2xWUUhuZXdYTEs2blV4SnNFcFBIdG16bDRaSzN3TTNrYnp3Y0MzUVVaaGk3TnBLUnptS3FuclcrSGhYTGFjUER4QU5MQlpQazh5WWhIQ1VyR3E2dlR1Q2ZuIiwKICAgICJwdWJsaWNLZXkiOiAiTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUFvRVRuUG1ONTV4QkpqUnpOL2NzMzBPeko5b2xrdGVMVk5SanpkVHhGT3lSdFMyb3ZEZnpkaGhPOVh6VWNUTWJJc0NPQVp0U3Q4Sys2eXZCWHlwT1NZdkk3NUVVZHlwbWtjSzFLb3B0cVk1S0VCUTFLd2hXdVA3SVdRMGZzaFV3RDZqSTFRV0RmR3hmTS9oMzRGdkVuLzB0SjcxeE4yUDhUSTJZYW53dURaZ29zZG9ieC9QQXZsR1JFQkd1azRCZ21leFRPa0FkbkZ4SVVRY0NraUVaMkM0MXVDcnhpUzRDRWU1T1g5MWFLOUhLWlY0WkpYNnZucU1IbWREbnNNZE8rVUZ0eE9CWVppbythMWpQNFczZDdKNWZHZWlPYVhqUUNPcGl2S25QMnlVMkRQZFdtRE15VmI2N2w4RFJBK2poME9KRktaNUgyZk5nRTNJSTU5dmRzUndJREFRQUIiLAogICAgImNlcnRpZmljYXRlIjogIk1JSUNtekNDQVlNQ0JnRmF2LzlOYkRBTkJna3Foa2lHOXcwQkFRc0ZBREFSTVE4d0RRWURWUVFEREFadFlYTjBaWEl3SGhjTk1UY3dNekV5TURBME9USTBXaGNOTWpjd016RXlNREExTVRBMFdqQVJNUTh3RFFZRFZRUUREQVp0WVhOMFpYSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZ1JPYytZM25uRUVtTkhNMzl5emZRN01uMmlXUzE0dFUxR1BOMVBFVTdKRzFMYWk4Ti9OMkdFNzFmTlJ4TXhzaXdJNEJtMUszd3I3cks4RmZLazVKaThqdmtSUjNLbWFSd3JVcWltMnBqa29RRkRVckNGYTQvc2haRFIreUZUQVBxTWpWQllOOGJGOHorSGZnVzhTZi9TMG52WEUzWS94TWpaaHFmQzRObUNpeDJodkg4OEMrVVpFUUVhNlRnR0NaN0ZNNlFCMmNYRWhSQndLU0lSbllMalc0S3ZHSkxnSVI3azVmM1ZvcjBjcGxYaGtsZnErZW93ZVowT2V3eDA3NVFXM0U0RmhtS2o1cldNL2hiZDNzbmw4WjZJNXBlTkFJNm1LOHFjL2JKVFlNOTFhWU16SlZ2cnVYd05FRDZPSFE0a1VwbmtmWjgyQVRjZ2puMjkyeEhBZ01CQUFFd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFBK1J1RW9aaU9RR2ZZZlhWVDNkRTZUaDNJTm5SM25TdE51UDVBUXYvY055REJ3QzV5TFVkQkFCRE9VYVBTYjZPV0lZOHB4R3M0NTdGY3QwZ3pRc1B1RTk5WmszR0RmUk5PcWtNQTk1Mk80R2grSGMyN05iellmTG1oUHlUU1RlMW9LQnhvWW1zbUJ3NTdWaXgrck9LYmhMQUh5Vmg1UVhsNGhoYnRydUxkcVA2RU13TDExZVd5a0JDSjFiN2dDdVlqQ0dLcFliTEtwU3RnMnhYbzlyUFRkM05tbVBZbnBDWU5yRXdsNzZQKythNHc5SWNzVW4yRW1CdTBQM25qWWd0eFd1Y1RxOUxENUkwaDR1b2tuWkVpckVSa1gxMVNqUW5UemFucHE4bktwaFJWMFJkR25XV1NFTjQzOEhsMVhSNHpyU1JsQ2xGbE4zTWNGNEM0VTRNVkU9IiwKICAgICJjb2RlU2VjcmV0IjogIjQ5YmQwMDIxLWE2MWYtNDQ1Mi05ZWUwLTEwMTAwNjIxZDkxNyIsCiAgICAicm9sZXMiOiB7CiAgICAgICJyZWFsbSI6IFsKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiYzE2NmYzNzYtZDQ1MC00OTgzLWE0ZDgtNTNhYjI5N2MzZmE1IiwKICAgICAgICAgICJuYW1lIjogImFkbWluIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfYWRtaW59IiwKICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICJjb21wb3NpdGUiOiB0cnVlLAogICAgICAgICAgImNvbXBvc2l0ZXMiOiB7CiAgICAgICAgICAgICJyZWFsbSI6IFsKICAgICAgICAgICAgICAiY3JlYXRlLXJlYWxtIgogICAgICAgICAgICBdLAogICAgICAgICAgICAiY2xpZW50IjogewogICAgICAgICAgICAgICJkZW1vLXJlYWxtIjogWwogICAgICAgICAgICAgICAgIm1hbmFnZS1ldmVudHMiLAogICAgICAgICAgICAgICAgIm1hbmFnZS1jbGllbnRzIiwKICAgICAgICAgICAgICAgICJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsCiAgICAgICAgICAgICAgICAiY3JlYXRlLWNsaWVudCIsCiAgICAgICAgICAgICAgICAidmlldy1ldmVudHMiLAogICAgICAgICAgICAgICAgInZpZXctY2xpZW50cyIsCiAgICAgICAgICAgICAgICAibWFuYWdlLXJlYWxtIiwKICAgICAgICAgICAgICAgICJ2aWV3LXVzZXJzIiwKICAgICAgICAgICAgICAgICJtYW5hZ2UtdXNlcnMiLAogICAgICAgICAgICAgICAgImltcGVyc29uYXRpb24iLAogICAgICAgICAgICAgICAgInZpZXctcmVhbG0iLAogICAgICAgICAgICAgICAgIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiOWVmOGM5NjItYjQxYS00YzZjLThlODYtYThjMjJiZGU3ODA4IiwKICAgICAgICAgICJuYW1lIjogImNyZWF0ZS1yZWFsbSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX2NyZWF0ZS1yZWFsbX0iLAogICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiMGE3NTg1MWUtNjNmMC00NWQyLThlNWUtZDQzMjE4YWE5YTA4IiwKICAgICAgICAgICJuYW1lIjogImJvb3N0ZXItYWRtaW4iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgQm9vc3RlciBhZG1pbmlzdHJhdG9yIHJvbGUiLAogICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAiaWQiOiAiZmM0YWVkNTEtMDc1Zi00MzhiLTk3YWItMzRkNDU2NmU2MjRiIiwKICAgICAgICAgICJuYW1lIjogIm9mZmxpbmVfYWNjZXNzIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfb2ZmbGluZS1hY2Nlc3N9IiwKICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgfQogICAgICBdLAogICAgICAiY2xpZW50IjogewogICAgICAgICJkZW1vYXBwIjogW10sCiAgICAgICAgInNlY3VyaXR5LWFkbWluLWNvbnNvbGUiOiBbXSwKICAgICAgICAic2VjdXJlZC1ib29zdGVyLWVuZHBvaW50IjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMWY0YmVhMTUtYTJiMy00YTM0LWFmYzktYzBlMjY0YmU4MTM2IiwKICAgICAgICAgICAgIm5hbWUiOiAiYm9vc3Rlci1hZG1pbiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIEJvb3N0ZXIgYWRtaW5pc3RyYXRvciBjbGllbnQiLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImFkbWluLWNsaSI6IFtdLAogICAgICAgICJicm9rZXIiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI0NTRjZDU4NC1iMWRlLTRhZDEtYTdkZi1lNGQyYWQ5ZjEyYjgiLAogICAgICAgICAgICAibmFtZSI6ICJyZWFkLXRva2VuIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV9yZWFkLXRva2VufSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiZGVtby1yZWFsbSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjgxZTNkYTZhLWRmNmMtNDY2My05NGEzLTVhYmFhYzEzYTY2OCIsCiAgICAgICAgICAgICJuYW1lIjogIm1hbmFnZS1ldmVudHMiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX21hbmFnZS1ldmVudHN9IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI1NjU4NTNkYS1hZjFiLTQ1NTUtYmU3Ny0yYTQ3Y2JkY2UyMmEiLAogICAgICAgICAgICAibmFtZSI6ICJtYW5hZ2UtcmVhbG0iLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX21hbmFnZS1yZWFsbX0iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjI1M2ZiOTg4LTQzODQtNDk4Mi1iNjA5LTYzNjliMTAwYzRjMiIsCiAgICAgICAgICAgICJuYW1lIjogInZpZXctdXNlcnMiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX3ZpZXctdXNlcnN9IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIyMDNmMzU2MC0yMGIzLTQ1ZmItYTAxNC02YjFhNDg4NDgzODQiLAogICAgICAgICAgICAibmFtZSI6ICJtYW5hZ2UtdXNlcnMiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX21hbmFnZS11c2Vyc30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjQzODNkY2MyLTBkMzUtNGRiZi04NDQ3LWE4NWQ4NDFmMDlkNCIsCiAgICAgICAgICAgICJuYW1lIjogIm1hbmFnZS1jbGllbnRzIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV9tYW5hZ2UtY2xpZW50c30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjkwNzFmODZmLWU3ZDUtNDAzZC05NzY5LThjZjU2MzZiNzRmYyIsCiAgICAgICAgICAgICJuYW1lIjogInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV92aWV3LWlkZW50aXR5LXByb3ZpZGVyc30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjdmYTVmNjNiLWJhMzktNDk2ZS05OWVlLWNhZTMzNDIzYWY5YiIsCiAgICAgICAgICAgICJuYW1lIjogImNyZWF0ZS1jbGllbnQiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX2NyZWF0ZS1jbGllbnR9IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJmMDg2MTg4Mi1lMzM3LTQyYmItOWQyNy1jZDUyZmZhY2MzZjciLAogICAgICAgICAgICAibmFtZSI6ICJ2aWV3LWV2ZW50cyIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfdmlldy1ldmVudHN9IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJhZTIxOWU3Mi02NWE5LTRjNDUtYWU1Ni00M2RkNmY2YmIyMzEiLAogICAgICAgICAgICAibmFtZSI6ICJpbXBlcnNvbmF0aW9uIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV9pbXBlcnNvbmF0aW9ufSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiYjQwNTZjNWQtMWFjMS00M2JiLTkxM2ItZjdiZWIyMTM2NjUyIiwKICAgICAgICAgICAgIm5hbWUiOiAidmlldy1jbGllbnRzIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV92aWV3LWNsaWVudHN9IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI1NjQ4MGUwMi03ZjE0LTRhOGUtODI1ZC01ZDNlOTk0OGRhMTQiLAogICAgICAgICAgICAibmFtZSI6ICJ2aWV3LXJlYWxtIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIiR7cm9sZV92aWV3LXJlYWxtfSIsCiAgICAgICAgICAgICJzY29wZVBhcmFtUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbXBvc2l0ZSI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiZDM0OGU5YmYtZTJiNC00YjljLThjYmEtY2VhOTljNmJiMzJlIiwKICAgICAgICAgICAgIm5hbWUiOiAibWFuYWdlLWlkZW50aXR5LXByb3ZpZGVycyIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfbWFuYWdlLWlkZW50aXR5LXByb3ZpZGVyc30iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImFjY291bnQiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIwY2IxYWI0Ni0wY2JhLTRmNGYtOTA3NS1hMmJkNGNlYTM0OTkiLAogICAgICAgICAgICAibmFtZSI6ICJtYW5hZ2UtYWNjb3VudCIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIke3JvbGVfbWFuYWdlLWFjY291bnR9IiwKICAgICAgICAgICAgInNjb3BlUGFyYW1SZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29tcG9zaXRlIjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJmZDg5NmJiNC0yODEyLTRjMzItYTNjMy02ZTQzODQzNjMzZjkiLAogICAgICAgICAgICAibmFtZSI6ICJ2aWV3LXByb2ZpbGUiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiJHtyb2xlX3ZpZXctcHJvZmlsZX0iLAogICAgICAgICAgICAic2NvcGVQYXJhbVJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb21wb3NpdGUiOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgICJncm91cHMiOiBbXSwKICAgICJkZWZhdWx0Um9sZXMiOiBbCiAgICAgICJvZmZsaW5lX2FjY2VzcyIKICAgIF0sCiAgICAicmVxdWlyZWRDcmVkZW50aWFscyI6IFsKICAgICAgInBhc3N3b3JkIgogICAgXSwKICAgICJwYXNzd29yZFBvbGljeSI6ICJoYXNoSXRlcmF0aW9ucygyMDAwMCkiLAogICAgIm90cFBvbGljeVR5cGUiOiAidG90cCIsCiAgICAib3RwUG9saWN5QWxnb3JpdGhtIjogIkhtYWNTSEExIiwKICAgICJvdHBQb2xpY3lJbml0aWFsQ291bnRlciI6IDAsCiAgICAib3RwUG9saWN5RGlnaXRzIjogNiwKICAgICJvdHBQb2xpY3lMb29rQWhlYWRXaW5kb3ciOiAxLAogICAgIm90cFBvbGljeVBlcmlvZCI6IDMwLAogICAgInVzZXJzIjogWwogICAgICB7CiAgICAgICAgImlkIjogIjI2MjY3N2ZhLTEwMmItNGQ2MC05YTYxLWIxY2EyYWZkNjYzYSIsCiAgICAgICAgImNyZWF0ZWRUaW1lc3RhbXAiOiAxNDg5Mjc5ODgwNjMwLAogICAgICAgICJ1c2VybmFtZSI6ICJhZG1pbiIsCiAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICJ0b3RwIjogZmFsc2UsCiAgICAgICAgImVtYWlsVmVyaWZpZWQiOiBmYWxzZSwKICAgICAgICAiY3JlZGVudGlhbHMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogInBhc3N3b3JkIiwKICAgICAgICAgICAgImhhc2hlZFNhbHRlZFZhbHVlIjogImwxYjlYNUdYWkowSHVEQzBNTXRwbTdHUm9JRnlIQTYxalJPZ3Y0OUxzbXMrZTY1WW90N21Rc2dNaTYrSUsxTUVZbUlLM0VTMFpkSFBObmMwUTlDaWVBPT0iLAogICAgICAgICAgICAic2FsdCI6ICJDNmwvUm1zT3pCMGx6MnRxMllmYXh3PT0iLAogICAgICAgICAgICAiaGFzaEl0ZXJhdGlvbnMiOiAyMDAwMCwKICAgICAgICAgICAgImNvdW50ZXIiOiAwLAogICAgICAgICAgICAiYWxnb3JpdGhtIjogInBia2RmMiIsCiAgICAgICAgICAgICJkaWdpdHMiOiAwLAogICAgICAgICAgICAiY3JlYXRlZERhdGUiOiAxNDg5Mjc5ODgwMDAwCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicmVxdWlyZWRBY3Rpb25zIjogW10sCiAgICAgICAgInJlYWxtUm9sZXMiOiBbCiAgICAgICAgICAiYWRtaW4iLAogICAgICAgICAgIm9mZmxpbmVfYWNjZXNzIgogICAgICAgIF0sCiAgICAgICAgImNsaWVudFJvbGVzIjogewogICAgICAgICAgImFjY291bnQiOiBbCiAgICAgICAgICAgICJtYW5hZ2UtYWNjb3VudCIsCiAgICAgICAgICAgICJ2aWV3LXByb2ZpbGUiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiZ3JvdXBzIjogW10KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICJjMDE3NWNjYi0wODkyLTRiMzEtODI5Zi1kZGE4NzM4MTVmZTgiLAogICAgICAgICJjcmVhdGVkVGltZXN0YW1wIjogMTQ4OTI4MDc3Mzk3MCwKICAgICAgICAidXNlcm5hbWUiOiAiYWxpY2UiLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAidG90cCI6IGZhbHNlLAogICAgICAgICJlbWFpbFZlcmlmaWVkIjogZmFsc2UsCiAgICAgICAgImZpcnN0TmFtZSI6ICJBbGljZSIsCiAgICAgICAgImxhc3ROYW1lIjogIkluQ2hhaW5zIiwKICAgICAgICAiZW1haWwiOiAiYWxpY2VAa2V5Y2xvYWsub3JnIiwKICAgICAgICAiY3JlZGVudGlhbHMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ0eXBlIjogInBhc3N3b3JkIiwKICAgICAgICAgICAgImhhc2hlZFNhbHRlZFZhbHVlIjogIlh4OUpQd2ZhZjdnR0cyNEZBUXdackhBOVVIZ0xaWTFBK2Nibkl1NE1KUkZQbmxuYXFqV0YrcmhrYm05M0F4cUdBS3lwcStybjdPd29ZMHRwSzhRL0NRPT0iLAogICAgICAgICAgICAic2FsdCI6ICJoQVRycDJMQTI0dEtlK2dpVmluV0h3PT0iLAogICAgICAgICAgICAiaGFzaEl0ZXJhdGlvbnMiOiAyMDAwMCwKICAgICAgICAgICAgImNvdW50ZXIiOiAwLAogICAgICAgICAgICAiYWxnb3JpdGhtIjogInBia2RmMiIsCiAgICAgICAgICAgICJkaWdpdHMiOiAwLAogICAgICAgICAgICAiY3JlYXRlZERhdGUiOiAxNDg5MjgwNzkxMDAwCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicmVxdWlyZWRBY3Rpb25zIjogW10sCiAgICAgICAgInJlYWxtUm9sZXMiOiBbCiAgICAgICAgICAiYm9vc3Rlci1hZG1pbiIsCiAgICAgICAgICAib2ZmbGluZV9hY2Nlc3MiCiAgICAgICAgXSwKICAgICAgICAiY2xpZW50Um9sZXMiOiB7CiAgICAgICAgICAic2VjdXJlZC1ib29zdGVyLWVuZHBvaW50IjogWwogICAgICAgICAgICAiYm9vc3Rlci1hZG1pbiIKICAgICAgICAgIF0sCiAgICAgICAgICAiYWNjb3VudCI6IFsKICAgICAgICAgICAgIm1hbmFnZS1hY2NvdW50IiwKICAgICAgICAgICAgInZpZXctcHJvZmlsZSIKICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJncm91cHMiOiBbXQogICAgICB9CiAgICBdLAogICAgInNjb3BlTWFwcGluZ3MiOiBbCiAgICAgIHsKICAgICAgICAiY2xpZW50IjogImFkbWluLWNsaSIsCiAgICAgICAgInJvbGVzIjogWwogICAgICAgICAgImFkbWluIgogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJjbGllbnQiOiAic2VjdXJpdHktYWRtaW4tY29uc29sZSIsCiAgICAgICAgInJvbGVzIjogWwogICAgICAgICAgImFkbWluIgogICAgICAgIF0KICAgICAgfQogICAgXSwKICAgICJjbGllbnRzIjogWwogICAgICB7CiAgICAgICAgImlkIjogImIwMjY4OGUwLWEwNDEtNGVlZi1hMTExLWE5ODdlMzA1NTYwNyIsCiAgICAgICAgImNsaWVudElkIjogImFjY291bnQiLAogICAgICAgICJuYW1lIjogIiR7Y2xpZW50X2FjY291bnR9IiwKICAgICAgICAiYmFzZVVybCI6ICIvYXV0aC9yZWFsbXMvZGVtby9hY2NvdW50IiwKICAgICAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICJjbGllbnRBdXRoZW50aWNhdG9yVHlwZSI6ICJjbGllbnQtc2VjcmV0IiwKICAgICAgICAic2VjcmV0IjogIjE4NDBlMGQ0LTMxMjMtNGZlNS04OGRkLTIwNjAzMDgyNzhjNSIsCiAgICAgICAgImRlZmF1bHRSb2xlcyI6IFsKICAgICAgICAgICJ2aWV3LXByb2ZpbGUiLAogICAgICAgICAgIm1hbmFnZS1hY2NvdW50IgogICAgICAgIF0sCiAgICAgICAgInJlZGlyZWN0VXJpcyI6IFsKICAgICAgICAgICIvYXV0aC9yZWFsbXMvZGVtby9hY2NvdW50LyoiCiAgICAgICAgXSwKICAgICAgICAid2ViT3JpZ2lucyI6IFtdLAogICAgICAgICJub3RCZWZvcmUiOiAwLAogICAgICAgICJiZWFyZXJPbmx5IjogZmFsc2UsCiAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIjogdHJ1ZSwKICAgICAgICAiaW1wbGljaXRGbG93RW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIjogZmFsc2UsCiAgICAgICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAicHVibGljQ2xpZW50IjogZmFsc2UsCiAgICAgICAgImZyb250Y2hhbm5lbExvZ291dCI6IGZhbHNlLAogICAgICAgICJhdHRyaWJ1dGVzIjoge30sCiAgICAgICAgImZ1bGxTY29wZUFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAibm9kZVJlUmVnaXN0cmF0aW9uVGltZW91dCI6IDAsCiAgICAgICAgInByb3RvY29sTWFwcGVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImY5NzFkNDRhLTE0NTctNDg3My1hZjg0LTFkNDM1NWRiODg5MiIsCiAgICAgICAgICAgICJuYW1lIjogImVtYWlsIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtlbWFpbH0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI5OWFhY2IwNS0wMTU4LTQyMzYtOTZiOC02OWMwMWQzYmI1OWUiLAogICAgICAgICAgICAibmFtZSI6ICJyb2xlIGxpc3QiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAic2FtbCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJzYW1sLXJvbGUtbGlzdC1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInNpbmdsZSI6ICJmYWxzZSIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lZm9ybWF0IjogIkJhc2ljIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWUiOiAiUm9sZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjZlNzNkMmE3LTM1ZjQtNDY4OC05MWMyLTVmODg0YTcyZDczYyIsCiAgICAgICAgICAgICJuYW1lIjogImZhbWlseSBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmYW1pbHlOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImxhc3ROYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJmYW1pbHlfbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImQwYTFlOGI0LWRlMTgtNGM0MS1hN2UwLTMzMWRlMDE5OWRjOCIsCiAgICAgICAgICAgICJuYW1lIjogImZ1bGwgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZnVsbE5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiYTM3MGExOWEtZjg2Yi00NDJjLThmNjMtNWYyZGYwOWRhODU3IiwKICAgICAgICAgICAgIm5hbWUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke3VzZXJuYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI4MzNjOGJmMS03OTUxLTRlMjktOTMyMi03MzA4NzdhMTllZTIiLAogICAgICAgICAgICAibmFtZSI6ICJnaXZlbiBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtnaXZlbk5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAiZmlyc3ROYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJnaXZlbl9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidXNlVGVtcGxhdGVDb25maWciOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVTY29wZSI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZU1hcHBlcnMiOiBmYWxzZQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogImY0ZjdlZjBmLWZhMjItNDU4OS1iMWFkLTNmZTQ4MmM0OTZiNyIsCiAgICAgICAgImNsaWVudElkIjogImFkbWluLWNsaSIsCiAgICAgICAgIm5hbWUiOiAiJHtjbGllbnRfYWRtaW4tY2xpfSIsCiAgICAgICAgInN1cnJvZ2F0ZUF1dGhSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJlbmFibGVkIjogdHJ1ZSwKICAgICAgICAiY2xpZW50QXV0aGVudGljYXRvclR5cGUiOiAiY2xpZW50LXNlY3JldCIsCiAgICAgICAgInNlY3JldCI6ICJjN2MxNTk4Yi0wYzZkLTQ4ZmItOTg5Ny01ZmIyOGQ0NmNkOTkiLAogICAgICAgICJyZWRpcmVjdFVyaXMiOiBbXSwKICAgICAgICAid2ViT3JpZ2lucyI6IFtdLAogICAgICAgICJub3RCZWZvcmUiOiAwLAogICAgICAgICJiZWFyZXJPbmx5IjogZmFsc2UsCiAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIjogZmFsc2UsCiAgICAgICAgImltcGxpY2l0Rmxvd0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAiZGlyZWN0QWNjZXNzR3JhbnRzRW5hYmxlZCI6IHRydWUsCiAgICAgICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAicHVibGljQ2xpZW50IjogdHJ1ZSwKICAgICAgICAiZnJvbnRjaGFubmVsTG9nb3V0IjogZmFsc2UsCiAgICAgICAgImF0dHJpYnV0ZXMiOiB7fSwKICAgICAgICAiZnVsbFNjb3BlQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IjogMCwKICAgICAgICAicHJvdG9jb2xNYXBwZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiN2ExNGRjMjktNTNjZi00NzVjLTkwNjMtZjg1YmI2MjBhNzJkIiwKICAgICAgICAgICAgIm5hbWUiOiAiZnVsbCBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmdWxsTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJmNWVmNDgxMi04YmViLTQzMzMtOGUyOC03ZTM2YjY4ZTdlNDAiLAogICAgICAgICAgICAibmFtZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7dXNlcm5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogInByZWZlcnJlZF91c2VybmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImQ2NDhkNWIyLTNkMGEtNDgwZC1hNWJmLTI2MmJiNjFiZDFiMSIsCiAgICAgICAgICAgICJuYW1lIjogImVtYWlsIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtlbWFpbH0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIzZDI3YzhjMS1hM2Q2LTQ3YTEtOTc5MS1iMzk2Y2RlYmFjNGIiLAogICAgICAgICAgICAibmFtZSI6ICJnaXZlbiBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtnaXZlbk5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAiZmlyc3ROYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJnaXZlbl9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMGUzZjJkNmQtODcyZS00OTIyLThjZjctYTc5YmQ4YTVkZDBlIiwKICAgICAgICAgICAgIm5hbWUiOiAiZmFtaWx5IG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2ZhbWlseU5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAibGFzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImZhbWlseV9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiOTBiOWQ3MjktNDBkYi00ODdjLWIyZWItMmM5YzI1MTFhODBjIiwKICAgICAgICAgICAgIm5hbWUiOiAicm9sZSBsaXN0IiwKICAgICAgICAgICAgInByb3RvY29sIjogInNhbWwiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJzaW5nbGUiOiAiZmFsc2UiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCI6ICJCYXNpYyIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lIjogIlJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ1c2VUZW1wbGF0ZUNvbmZpZyI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZVNjb3BlIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlTWFwcGVycyI6IGZhbHNlCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiNDIxN2M4M2YtOTFiOS00NzYxLWI0MDItN2E4ZWE5ZTVjYTVhIiwKICAgICAgICAiY2xpZW50SWQiOiAiYnJva2VyIiwKICAgICAgICAibmFtZSI6ICIke2NsaWVudF9icm9rZXJ9IiwKICAgICAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICJjbGllbnRBdXRoZW50aWNhdG9yVHlwZSI6ICJjbGllbnQtc2VjcmV0IiwKICAgICAgICAic2VjcmV0IjogIjQ2OWQ1YmQwLWI3OWItNDRjMS05YzBmLWYxNjczMGVmMTEwZiIsCiAgICAgICAgInJlZGlyZWN0VXJpcyI6IFtdLAogICAgICAgICJ3ZWJPcmlnaW5zIjogW10sCiAgICAgICAgIm5vdEJlZm9yZSI6IDAsCiAgICAgICAgImJlYXJlck9ubHkiOiBmYWxzZSwKICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgInN0YW5kYXJkRmxvd0VuYWJsZWQiOiB0cnVlLAogICAgICAgICJpbXBsaWNpdEZsb3dFbmFibGVkIjogZmFsc2UsCiAgICAgICAgImRpcmVjdEFjY2Vzc0dyYW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJwdWJsaWNDbGllbnQiOiBmYWxzZSwKICAgICAgICAiZnJvbnRjaGFubmVsTG9nb3V0IjogZmFsc2UsCiAgICAgICAgImF0dHJpYnV0ZXMiOiB7fSwKICAgICAgICAiZnVsbFNjb3BlQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IjogMCwKICAgICAgICAicHJvdG9jb2xNYXBwZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMWY5N2QwODYtYTg4Ny00N2MyLTliYzQtNTBmNWMyYjEzYzU3IiwKICAgICAgICAgICAgIm5hbWUiOiAiZmFtaWx5IG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2ZhbWlseU5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAibGFzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImZhbWlseV9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiNGQxMTY5MDYtMWE5Ny00YWJkLWE3ZGMtNmM0MDFlZGEyZDI2IiwKICAgICAgICAgICAgIm5hbWUiOiAiZnVsbCBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmdWxsTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI3ZDY3MzE0My1hN2I5LTQxNGEtODEwMy0wMjI4NWRhZTY2N2QiLAogICAgICAgICAgICAibmFtZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7dXNlcm5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogInByZWZlcnJlZF91c2VybmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImY4YWUzNmEyLTZhMDctNGMyOS1hMmYwLTdkNDQ3NmZmMzIxYyIsCiAgICAgICAgICAgICJuYW1lIjogInJvbGUgbGlzdCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJzYW1sIiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogInNhbWwtcm9sZS1saXN0LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAic2luZ2xlIjogImZhbHNlIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWVmb3JtYXQiOiAiQmFzaWMiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZSI6ICJSb2xlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiODUxMDJmN2YtYmY4MC00MjY1LTllODItMWU0ZjYzMjcwNWFhIiwKICAgICAgICAgICAgIm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2VtYWlsfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImVtYWlsIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjBhNTdiNGVjLTk5NmMtNDc0Ny05MjlkLWQ3ZDFiZTdkMDM0NCIsCiAgICAgICAgICAgICJuYW1lIjogImdpdmVuIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2dpdmVuTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJmaXJzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImdpdmVuX25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ1c2VUZW1wbGF0ZUNvbmZpZyI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZVNjb3BlIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlTWFwcGVycyI6IGZhbHNlCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiY2IwYmYzNzYtNzJjZi00ZDk4LTlkMDctMDRjNGYzODdjN2VhIiwKICAgICAgICAiY2xpZW50SWQiOiAiZGVtb2FwcCIsCiAgICAgICAgIm5hbWUiOiAiIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGRlZmF1bHQgY2xpZW50IGFwcGxpY2F0aW9uIiwKICAgICAgICAic3Vycm9nYXRlQXV0aFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgImVuYWJsZWQiOiB0cnVlLAogICAgICAgICJjbGllbnRBdXRoZW50aWNhdG9yVHlwZSI6ICJjbGllbnQtc2VjcmV0IiwKICAgICAgICAic2VjcmV0IjogIjFkYWE1N2EyLWI2MGUtNDY4Yi1hM2FjLTI1YmQyZGMyZWFkYyIsCiAgICAgICAgInJlZGlyZWN0VXJpcyI6IFsKICAgICAgICAgICIqIgogICAgICAgIF0sCiAgICAgICAgIndlYk9yaWdpbnMiOiBbCiAgICAgICAgICAiKiIKICAgICAgICBdLAogICAgICAgICJub3RCZWZvcmUiOiAwLAogICAgICAgICJiZWFyZXJPbmx5IjogZmFsc2UsCiAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIjogdHJ1ZSwKICAgICAgICAiaW1wbGljaXRGbG93RW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIjogdHJ1ZSwKICAgICAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJwdWJsaWNDbGllbnQiOiBmYWxzZSwKICAgICAgICAiZnJvbnRjaGFubmVsTG9nb3V0IjogZmFsc2UsCiAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAiYXR0cmlidXRlcyI6IHsKICAgICAgICAgICJzYW1sLmFzc2VydGlvbi5zaWduYXR1cmUiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwuZm9yY2UucG9zdC5iaW5kaW5nIjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLm11bHRpdmFsdWVkLnJvbGVzIjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLmVuY3J5cHQiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWxfZm9yY2VfbmFtZV9pZF9mb3JtYXQiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwuY2xpZW50LnNpZ25hdHVyZSI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5hdXRobnN0YXRlbWVudCI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5zZXJ2ZXIuc2lnbmF0dXJlIjogImZhbHNlIgogICAgICAgIH0sCiAgICAgICAgImZ1bGxTY29wZUFsbG93ZWQiOiB0cnVlLAogICAgICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IjogLTEsCiAgICAgICAgInByb3RvY29sTWFwcGVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImUxZTg4YjVhLTZhNDUtNDRmYS04ZTZlLWI1YzhhZjY2YzRiMCIsCiAgICAgICAgICAgICJuYW1lIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHt1c2VybmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAicHJlZmVycmVkX3VzZXJuYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMDMyZjM5NmUtZDBmYy00MDVkLTk2NGEtODllYzQ5Yzk3ZWRhIiwKICAgICAgICAgICAgIm5hbWUiOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7Z2l2ZW5OYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImZpcnN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZ2l2ZW5fbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjE0ZjBjY2E1LTI2NGItNGY5ZC1hYWM3LTMwODFhMGJhNDA5YiIsCiAgICAgICAgICAgICJuYW1lIjogImZ1bGwgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZnVsbE5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiYTAwYzkzNGMtNWIwMS00MzE1LTg4MDEtMDBkODgzNTVhMzNjIiwKICAgICAgICAgICAgIm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2VtYWlsfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImVtYWlsIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogImU2MTY4ZTcyLWUwOWItNDAzNi04NDVjLTAyNTAyMTQ5Y2JiNCIsCiAgICAgICAgICAgICJuYW1lIjogInJvbGUgbGlzdCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJzYW1sIiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogInNhbWwtcm9sZS1saXN0LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAic2luZ2xlIjogImZhbHNlIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWVmb3JtYXQiOiAiQmFzaWMiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZSI6ICJSb2xlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMjcxZWQ1YjgtZWVjOS00MGEwLTg5MTMtMTlkMGRjOGUyOTBlIiwKICAgICAgICAgICAgIm5hbWUiOiAiZmFtaWx5IG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2ZhbWlseU5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAibGFzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImZhbWlseV9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAidXNlVGVtcGxhdGVDb25maWciOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVTY29wZSI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZU1hcHBlcnMiOiBmYWxzZQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogIjE1YThjYjU5LTc0ODAtNDdmYS1iMGMzLTRiZGRlNTQ4ZTgzMiIsCiAgICAgICAgImNsaWVudElkIjogImRlbW8tcmVhbG0iLAogICAgICAgICJuYW1lIjogImRlbW8gUmVhbG0iLAogICAgICAgICJzdXJyb2dhdGVBdXRoUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIjogImNsaWVudC1zZWNyZXQiLAogICAgICAgICJzZWNyZXQiOiAiNDczYTc5MzYtOTUwNy00NjY5LTgzYTYtODlkNDA5NGYyYzRiIiwKICAgICAgICAicmVkaXJlY3RVcmlzIjogW10sCiAgICAgICAgIndlYk9yaWdpbnMiOiBbXSwKICAgICAgICAibm90QmVmb3JlIjogMCwKICAgICAgICAiYmVhcmVyT25seSI6IHRydWUsCiAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIjogdHJ1ZSwKICAgICAgICAiaW1wbGljaXRGbG93RW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIjogZmFsc2UsCiAgICAgICAgInNlcnZpY2VBY2NvdW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAicHVibGljQ2xpZW50IjogZmFsc2UsCiAgICAgICAgImZyb250Y2hhbm5lbExvZ291dCI6IGZhbHNlLAogICAgICAgICJhdHRyaWJ1dGVzIjoge30sCiAgICAgICAgImZ1bGxTY29wZUFsbG93ZWQiOiB0cnVlLAogICAgICAgICJub2RlUmVSZWdpc3RyYXRpb25UaW1lb3V0IjogMCwKICAgICAgICAicHJvdG9jb2xNYXBwZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiYTFiZDg2YWMtNWUzNy00MmMwLThhNDYtZjlmYmMxOGQ2NmFkIiwKICAgICAgICAgICAgIm5hbWUiOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7Z2l2ZW5OYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogImZpcnN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZ2l2ZW5fbmFtZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjE4YTk0OGE3LWQ0N2UtNDI4NS1hOGJlLTRiMWRlNDUzZGQwOCIsCiAgICAgICAgICAgICJuYW1lIjogImZ1bGwgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLWZ1bGwtbmFtZS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZnVsbE5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiOTliMDcyNmEtMDljMS00NDQ4LThmMTAtNTA4YWZhZmY2YjVjIiwKICAgICAgICAgICAgIm5hbWUiOiAidXNlcm5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke3VzZXJuYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJlODg5MjE4ZS0zMTM4LTQzMDgtYWRlZS05MTkzZDNhZWZiZjQiLAogICAgICAgICAgICAibmFtZSI6ICJmYW1pbHkgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZmFtaWx5TmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJsYXN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZmFtaWx5X25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI3ZDgyODQ4Ni1mYzc5LTRiOTUtYjZhMS05MGEyZDYwOWRiNzAiLAogICAgICAgICAgICAibmFtZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZW1haWx9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImVtYWlsIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiYmU1ZDY1NzctMDVkOS00ODcyLTkxOGItOWFjYTgyOWRiYjdiIiwKICAgICAgICAgICAgIm5hbWUiOiAicm9sZSBsaXN0IiwKICAgICAgICAgICAgInByb3RvY29sIjogInNhbWwiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAic2FtbC1yb2xlLWxpc3QtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJzaW5nbGUiOiAiZmFsc2UiLAogICAgICAgICAgICAgICJhdHRyaWJ1dGUubmFtZWZvcm1hdCI6ICJCYXNpYyIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lIjogIlJvbGUiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJ1c2VUZW1wbGF0ZUNvbmZpZyI6IGZhbHNlLAogICAgICAgICJ1c2VUZW1wbGF0ZVNjb3BlIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlTWFwcGVycyI6IGZhbHNlCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiZjZjYmEwOGMtZGE2NC00NjIyLWI0YTItMDFhNzRkMDQ2ZTlkIiwKICAgICAgICAiY2xpZW50SWQiOiAic2VjdXJlZC1ib29zdGVyLWVuZHBvaW50IiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBzZWN1cmVkIEJvb3N0ZXIgUkVTVCBlbmRwb2ludCByZXF1aXJpbmcgYm9vc3Rlci1hZG1pbiByb2xlIGZvciBhY2Nlc3MiLAogICAgICAgICJzdXJyb2dhdGVBdXRoUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIjogImNsaWVudC1zZWNyZXQiLAogICAgICAgICJyZWRpcmVjdFVyaXMiOiBbCiAgICAgICAgICAiKiIKICAgICAgICBdLAogICAgICAgICJ3ZWJPcmlnaW5zIjogWwogICAgICAgICAgIioiCiAgICAgICAgXSwKICAgICAgICAibm90QmVmb3JlIjogMCwKICAgICAgICAiYmVhcmVyT25seSI6IHRydWUsCiAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IGZhbHNlLAogICAgICAgICJzdGFuZGFyZEZsb3dFbmFibGVkIjogdHJ1ZSwKICAgICAgICAiaW1wbGljaXRGbG93RW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJkaXJlY3RBY2Nlc3NHcmFudHNFbmFibGVkIjogdHJ1ZSwKICAgICAgICAic2VydmljZUFjY291bnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJwdWJsaWNDbGllbnQiOiBmYWxzZSwKICAgICAgICAiZnJvbnRjaGFubmVsTG9nb3V0IjogZmFsc2UsCiAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAiYXR0cmlidXRlcyI6IHsKICAgICAgICAgICJzYW1sLmFzc2VydGlvbi5zaWduYXR1cmUiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwuZm9yY2UucG9zdC5iaW5kaW5nIjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLm11bHRpdmFsdWVkLnJvbGVzIjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLmVuY3J5cHQiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWxfZm9yY2VfbmFtZV9pZF9mb3JtYXQiOiAiZmFsc2UiLAogICAgICAgICAgInNhbWwuY2xpZW50LnNpZ25hdHVyZSI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5hdXRobnN0YXRlbWVudCI6ICJmYWxzZSIsCiAgICAgICAgICAic2FtbC5zZXJ2ZXIuc2lnbmF0dXJlIjogImZhbHNlIiwKICAgICAgICAgICJzYW1sLnNlcnZlci5zaWduYXR1cmUua2V5aW5mby5leHQiOiAiZmFsc2UiCiAgICAgICAgfSwKICAgICAgICAiZnVsbFNjb3BlQWxsb3dlZCI6IHRydWUsCiAgICAgICAgIm5vZGVSZVJlZ2lzdHJhdGlvblRpbWVvdXQiOiAtMSwKICAgICAgICAicHJvdG9jb2xNYXBwZXJzIjogWwogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiNjg0Yjg3NDktNDhiZi00MjA2LWE1YzYtOTA1YmRjNTQyZGVkIiwKICAgICAgICAgICAgIm5hbWUiOiAiZnVsbCBuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtZnVsbC1uYW1lLW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtmdWxsTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSI6ICJ0cnVlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiMjczN2NhMTgtMzRmZC00NDExLWJjYmUtODZkZDc4MzNhZmU0IiwKICAgICAgICAgICAgIm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2VtYWlsfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJjYzhjZTY0MS01YmExLTRhNjEtOWM2Yy1kNGZjNzhjOWY1OTciLAogICAgICAgICAgICAibmFtZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7dXNlcm5hbWV9IiwKICAgICAgICAgICAgImNvbmZpZyI6IHsKICAgICAgICAgICAgICAidXNlcmluZm8udG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgInVzZXIuYXR0cmlidXRlIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgICAiaWQudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImFjY2Vzcy50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiY2xhaW0ubmFtZSI6ICJwcmVmZXJyZWRfdXNlcm5hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI1ODcwNjE3ZC05NmM5LTRhODctYWMwYS1hNWNhYmFjMTgzYTQiLAogICAgICAgICAgICAibmFtZSI6ICJmYW1pbHkgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZmFtaWx5TmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyaW5mby50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAidXNlci5hdHRyaWJ1dGUiOiAibGFzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImZhbWlseV9uYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiOWMwN2FmNjQtZTFkMS00Yjg1LTg4ZmQtZGZhMDJlMGY4MDJiIiwKICAgICAgICAgICAgIm5hbWUiOiAiZ2l2ZW4gbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7Z2l2ZW5OYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInVzZXJpbmZvLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJmaXJzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImdpdmVuX25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICJkNTdlNzM4Ni02YTUwLTRiZjItYmJiMy0zNjc4ZGIzZjNiNWYiLAogICAgICAgICAgICAibmFtZSI6ICJyb2xlIGxpc3QiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAic2FtbCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJzYW1sLXJvbGUtbGlzdC1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInNpbmdsZSI6ICJmYWxzZSIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lZm9ybWF0IjogIkJhc2ljIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWUiOiAiUm9sZSIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInVzZVRlbXBsYXRlQ29uZmlnIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlU2NvcGUiOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVNYXBwZXJzIjogZmFsc2UKICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICIxZTQ2MmJmNS1kMTk0LTQwMGYtODY3Ny02NDI4YjNjNDc0ZWUiLAogICAgICAgICJjbGllbnRJZCI6ICJzZWN1cml0eS1hZG1pbi1jb25zb2xlIiwKICAgICAgICAibmFtZSI6ICIke2NsaWVudF9zZWN1cml0eS1hZG1pbi1jb25zb2xlfSIsCiAgICAgICAgImJhc2VVcmwiOiAiL2F1dGgvYWRtaW4vZGVtby9jb25zb2xlL2luZGV4Lmh0bWwiLAogICAgICAgICJzdXJyb2dhdGVBdXRoUmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImNsaWVudEF1dGhlbnRpY2F0b3JUeXBlIjogImNsaWVudC1zZWNyZXQiLAogICAgICAgICJzZWNyZXQiOiAiMGZhNDkyYzUtMjYyZS00ZTE1LWFiNmMtOTQzMTA5ZGM5YzM0IiwKICAgICAgICAicmVkaXJlY3RVcmlzIjogWwogICAgICAgICAgIi9hdXRoL2FkbWluL2RlbW8vY29uc29sZS8qIgogICAgICAgIF0sCiAgICAgICAgIndlYk9yaWdpbnMiOiBbXSwKICAgICAgICAibm90QmVmb3JlIjogMCwKICAgICAgICAiYmVhcmVyT25seSI6IGZhbHNlLAogICAgICAgICJjb25zZW50UmVxdWlyZWQiOiBmYWxzZSwKICAgICAgICAic3RhbmRhcmRGbG93RW5hYmxlZCI6IHRydWUsCiAgICAgICAgImltcGxpY2l0Rmxvd0VuYWJsZWQiOiBmYWxzZSwKICAgICAgICAiZGlyZWN0QWNjZXNzR3JhbnRzRW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJzZXJ2aWNlQWNjb3VudHNFbmFibGVkIjogZmFsc2UsCiAgICAgICAgInB1YmxpY0NsaWVudCI6IHRydWUsCiAgICAgICAgImZyb250Y2hhbm5lbExvZ291dCI6IGZhbHNlLAogICAgICAgICJhdHRyaWJ1dGVzIjoge30sCiAgICAgICAgImZ1bGxTY29wZUFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAibm9kZVJlUmVnaXN0cmF0aW9uVGltZW91dCI6IDAsCiAgICAgICAgInByb3RvY29sTWFwcGVycyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjI3ZDc3N2NiLThhMDItNDA4MS1hM2NjLTA0YTIwOWUxYTJhYyIsCiAgICAgICAgICAgICJuYW1lIjogImVtYWlsIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHtlbWFpbH0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJlbWFpbCIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZW1haWwiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICI4YjdjMmQxZC02OGNhLTRjNGEtOGRhZS1iZjE3OWU0YzNiMTgiLAogICAgICAgICAgICAibmFtZSI6ICJmYW1pbHkgbmFtZSIsCiAgICAgICAgICAgICJwcm90b2NvbCI6ICJvcGVuaWQtY29ubmVjdCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJvaWRjLXVzZXJtb2RlbC1wcm9wZXJ0eS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogdHJ1ZSwKICAgICAgICAgICAgImNvbnNlbnRUZXh0IjogIiR7ZmFtaWx5TmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJsYXN0TmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAiZmFtaWx5X25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIwOGQ4MDJiNy1kNGFiLTQ5ZTItOGI4MS1kYmY5NGFiZTFjZDYiLAogICAgICAgICAgICAibmFtZSI6ICJmdWxsIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy1mdWxsLW5hbWUtbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2Z1bGxOYW1lfSIsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjdlZjQzZjdjLTY3ODUtNDBhNS04Njk5LTk4NjQ2YTY1ZGU0ZiIsCiAgICAgICAgICAgICJuYW1lIjogImdpdmVuIG5hbWUiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAib3BlbmlkLWNvbm5lY3QiLAogICAgICAgICAgICAicHJvdG9jb2xNYXBwZXIiOiAib2lkYy11c2VybW9kZWwtcHJvcGVydHktbWFwcGVyIiwKICAgICAgICAgICAgImNvbnNlbnRSZXF1aXJlZCI6IHRydWUsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2dpdmVuTmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJmaXJzdE5hbWUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImdpdmVuX25hbWUiLAogICAgICAgICAgICAgICJqc29uVHlwZS5sYWJlbCI6ICJTdHJpbmciCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpZCI6ICIxNDc2OWJhNi1lZmZkLTQ4NGItYWFlNi02ZWNhY2FjYjQyNTMiLAogICAgICAgICAgICAibmFtZSI6ICJyb2xlIGxpc3QiLAogICAgICAgICAgICAicHJvdG9jb2wiOiAic2FtbCIsCiAgICAgICAgICAgICJwcm90b2NvbE1hcHBlciI6ICJzYW1sLXJvbGUtbGlzdC1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAgICAgInNpbmdsZSI6ICJmYWxzZSIsCiAgICAgICAgICAgICAgImF0dHJpYnV0ZS5uYW1lZm9ybWF0IjogIkJhc2ljIiwKICAgICAgICAgICAgICAiYXR0cmlidXRlLm5hbWUiOiAiUm9sZSIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImlkIjogIjU5YTE5ZjA1LTc4OWYtNDNkMC05YTY5LTBhNGMwMGUwNmE0ZCIsCiAgICAgICAgICAgICJuYW1lIjogInVzZXJuYW1lIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLXByb3BlcnR5LW1hcHBlciIsCiAgICAgICAgICAgICJjb25zZW50UmVxdWlyZWQiOiB0cnVlLAogICAgICAgICAgICAiY29uc2VudFRleHQiOiAiJHt1c2VybmFtZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJ1c2VybmFtZSIsCiAgICAgICAgICAgICAgImlkLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJhY2Nlc3MudG9rZW4uY2xhaW0iOiAidHJ1ZSIsCiAgICAgICAgICAgICAgImNsYWltLm5hbWUiOiAicHJlZmVycmVkX3VzZXJuYW1lIiwKICAgICAgICAgICAgICAianNvblR5cGUubGFiZWwiOiAiU3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiaWQiOiAiYTM1MzkxN2QtMjIwNS00MjMwLTljNTYtNjUzZjM1MzZlOTM5IiwKICAgICAgICAgICAgIm5hbWUiOiAibG9jYWxlIiwKICAgICAgICAgICAgInByb3RvY29sIjogIm9wZW5pZC1jb25uZWN0IiwKICAgICAgICAgICAgInByb3RvY29sTWFwcGVyIjogIm9pZGMtdXNlcm1vZGVsLWF0dHJpYnV0ZS1tYXBwZXIiLAogICAgICAgICAgICAiY29uc2VudFJlcXVpcmVkIjogZmFsc2UsCiAgICAgICAgICAgICJjb25zZW50VGV4dCI6ICIke2xvY2FsZX0iLAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJ1c2VyLmF0dHJpYnV0ZSI6ICJsb2NhbGUiLAogICAgICAgICAgICAgICJpZC50b2tlbi5jbGFpbSI6ICJ0cnVlIiwKICAgICAgICAgICAgICAiYWNjZXNzLnRva2VuLmNsYWltIjogInRydWUiLAogICAgICAgICAgICAgICJjbGFpbS5uYW1lIjogImxvY2FsZSIsCiAgICAgICAgICAgICAgImpzb25UeXBlLmxhYmVsIjogIlN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInVzZVRlbXBsYXRlQ29uZmlnIjogZmFsc2UsCiAgICAgICAgInVzZVRlbXBsYXRlU2NvcGUiOiBmYWxzZSwKICAgICAgICAidXNlVGVtcGxhdGVNYXBwZXJzIjogZmFsc2UKICAgICAgfQogICAgXSwKICAgICJjbGllbnRUZW1wbGF0ZXMiOiBbXSwKICAgICJicm93c2VyU2VjdXJpdHlIZWFkZXJzIjogewogICAgICAieENvbnRlbnRUeXBlT3B0aW9ucyI6ICJub3NuaWZmIiwKICAgICAgInhGcmFtZU9wdGlvbnMiOiAiU0FNRU9SSUdJTiIsCiAgICAgICJjb250ZW50U2VjdXJpdHlQb2xpY3kiOiAiZnJhbWUtc3JjICdzZWxmJyIKICAgIH0sCiAgICAic210cFNlcnZlciI6IHt9LAogICAgImV2ZW50c0VuYWJsZWQiOiBmYWxzZSwKICAgICJldmVudHNMaXN0ZW5lcnMiOiBbCiAgICAgICJqYm9zcy1sb2dnaW5nIgogICAgXSwKICAgICJlbmFibGVkRXZlbnRUeXBlcyI6IFtdLAogICAgImFkbWluRXZlbnRzRW5hYmxlZCI6IGZhbHNlLAogICAgImFkbWluRXZlbnRzRGV0YWlsc0VuYWJsZWQiOiBmYWxzZSwKICAgICJpbnRlcm5hdGlvbmFsaXphdGlvbkVuYWJsZWQiOiBmYWxzZSwKICAgICJzdXBwb3J0ZWRMb2NhbGVzIjogW10sCiAgICAiYXV0aGVudGljYXRpb25GbG93cyI6IFsKICAgICAgewogICAgICAgICJpZCI6ICJlOTQ4YTNiYy02NjZkLTRjYTEtODNkYi05YmI3Y2QyNDZkZjUiLAogICAgICAgICJhbGlhcyI6ICJIYW5kbGUgRXhpc3RpbmcgQWNjb3VudCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkhhbmRsZSB3aGF0IHRvIGRvIGlmIHRoZXJlIGlzIGV4aXN0aW5nIGFjY291bnQgd2l0aCBzYW1lIGVtYWlsL3VzZXJuYW1lIGxpa2UgYXV0aGVudGljYXRlZCBpZGVudGl0eSBwcm92aWRlciIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogZmFsc2UsCiAgICAgICAgImJ1aWx0SW4iOiB0cnVlLAogICAgICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImlkcC1jb25maXJtLWxpbmsiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiaWRwLWVtYWlsLXZlcmlmaWNhdGlvbiIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJBTFRFUk5BVElWRSIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDIwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiQUxURVJOQVRJVkUiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAzMCwKICAgICAgICAgICAgImZsb3dBbGlhcyI6ICJWZXJpZnkgRXhpc3RpbmcgQWNjb3VudCBieSBSZS1hdXRoZW50aWNhdGlvbiIsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogdHJ1ZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICI5NmIyY2ZlYy02MmUxLTQzZWQtOTdhNS1lZjMyZGI0ZDQ5NjkiLAogICAgICAgICJhbGlhcyI6ICJWZXJpZnkgRXhpc3RpbmcgQWNjb3VudCBieSBSZS1hdXRoZW50aWNhdGlvbiIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlJlYXV0aGVudGljYXRpb24gb2YgZXhpc3RpbmcgYWNjb3VudCIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogZmFsc2UsCiAgICAgICAgImJ1aWx0SW4iOiB0cnVlLAogICAgICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImlkcC11c2VybmFtZS1wYXNzd29yZC1mb3JtIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMTAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImF1dGgtb3RwLWZvcm0iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiT1BUSU9OQUwiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAyMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICJhOWJiNTVmYi03YWVjLTRjNDktODFjOC01YjM5NzRlOWQ5OGYiLAogICAgICAgICJhbGlhcyI6ICJicm93c2VyIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiYnJvd3NlciBiYXNlZCBhdXRoZW50aWNhdGlvbiIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogdHJ1ZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiYXV0aC1jb29raWUiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiQUxURVJOQVRJVkUiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiYXV0aC1zcG5lZ28iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiRElTQUJMRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAyMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIkFMVEVSTkFUSVZFIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMzAsCiAgICAgICAgICAgICJmbG93QWxpYXMiOiAiZm9ybXMiLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IHRydWUKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiNWU0ZDFlMWUtYzcxMy00YjBmLTg4ZjEtNGI1MjJhY2E3MjMwIiwKICAgICAgICAiYWxpYXMiOiAiY2xpZW50cyIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIkJhc2UgYXV0aGVudGljYXRpb24gZm9yIGNsaWVudHMiLAogICAgICAgICJwcm92aWRlcklkIjogImNsaWVudC1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiB0cnVlLAogICAgICAgICJidWlsdEluIjogdHJ1ZSwKICAgICAgICAiYXV0aGVudGljYXRpb25FeGVjdXRpb25zIjogWwogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJjbGllbnQtc2VjcmV0IiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIkFMVEVSTkFUSVZFIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMTAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImNsaWVudC1qd3QiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiQUxURVJOQVRJVkUiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAyMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICJiODNhNTk0Yy1lZTFkLTRhNmEtYjEyMC1lZDk4YWRiY2ExZmMiLAogICAgICAgICJhbGlhcyI6ICJkaXJlY3QgZ3JhbnQiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJPcGVuSUQgQ29ubmVjdCBSZXNvdXJjZSBPd25lciBHcmFudCIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogdHJ1ZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiZGlyZWN0LWdyYW50LXZhbGlkYXRlLXVzZXJuYW1lIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMTAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImRpcmVjdC1ncmFudC12YWxpZGF0ZS1wYXNzd29yZCIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJSRVFVSVJFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDIwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJkaXJlY3QtZ3JhbnQtdmFsaWRhdGUtb3RwIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIk9QVElPTkFMIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMzAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiM2JjOWYzMTctZmQ2Mi00ZmJhLTlkYzMtMmE0ZjNjN2ZlZjA4IiwKICAgICAgICAiYWxpYXMiOiAiZmlyc3QgYnJva2VyIGxvZ2luIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiQWN0aW9ucyB0YWtlbiBhZnRlciBmaXJzdCBicm9rZXIgbG9naW4gd2l0aCBpZGVudGl0eSBwcm92aWRlciBhY2NvdW50LCB3aGljaCBpcyBub3QgeWV0IGxpbmtlZCB0byBhbnkgS2V5Y2xvYWsgYWNjb3VudCIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogdHJ1ZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3JDb25maWciOiAicmV2aWV3IHByb2ZpbGUgY29uZmlnIiwKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiaWRwLXJldmlldy1wcm9maWxlIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMTAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yQ29uZmlnIjogImNyZWF0ZSB1bmlxdWUgdXNlciBjb25maWciLAogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJpZHAtY3JlYXRlLXVzZXItaWYtdW5pcXVlIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIkFMVEVSTkFUSVZFIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMjAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJBTFRFUk5BVElWRSIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDMwLAogICAgICAgICAgICAiZmxvd0FsaWFzIjogIkhhbmRsZSBFeGlzdGluZyBBY2NvdW50IiwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiB0cnVlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogImZhZjQwMTA2LWM3NTctNGI2Yi05ZDZlLTQ1MTA1ODM1OGM2OCIsCiAgICAgICAgImFsaWFzIjogImZvcm1zIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAiVXNlcm5hbWUsIHBhc3N3b3JkLCBvdHAgYW5kIG90aGVyIGF1dGggZm9ybXMuIiwKICAgICAgICAicHJvdmlkZXJJZCI6ICJiYXNpYy1mbG93IiwKICAgICAgICAidG9wTGV2ZWwiOiBmYWxzZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiYXV0aC11c2VybmFtZS1wYXNzd29yZC1mb3JtIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMTAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogImF1dGgtb3RwLWZvcm0iLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiT1BUSU9OQUwiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAyMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICI5MGY1Y2UxOS05OTZlLTQ0NTQtOWYwYS1mMDIxM2FmYWZhNzUiLAogICAgICAgICJhbGlhcyI6ICJyZWdpc3RyYXRpb24iLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJyZWdpc3RyYXRpb24gZmxvdyIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogdHJ1ZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAicmVnaXN0cmF0aW9uLXBhZ2UtZm9ybSIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJSRVFVSVJFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDEwLAogICAgICAgICAgICAiZmxvd0FsaWFzIjogInJlZ2lzdHJhdGlvbiBmb3JtIiwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiB0cnVlCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9LAogICAgICB7CiAgICAgICAgImlkIjogImI4NDg4MTNiLWU4NzMtNGJiYi04OTc2LTcyYjliMDA3ODk1NiIsCiAgICAgICAgImFsaWFzIjogInJlZ2lzdHJhdGlvbiBmb3JtIiwKICAgICAgICAiZGVzY3JpcHRpb24iOiAicmVnaXN0cmF0aW9uIGZvcm0iLAogICAgICAgICJwcm92aWRlcklkIjogImZvcm0tZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogZmFsc2UsCiAgICAgICAgImJ1aWx0SW4iOiB0cnVlLAogICAgICAgICJhdXRoZW50aWNhdGlvbkV4ZWN1dGlvbnMiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogInJlZ2lzdHJhdGlvbi11c2VyLWNyZWF0aW9uIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMjAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogInJlZ2lzdHJhdGlvbi1wcm9maWxlLWFjdGlvbiIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJSRVFVSVJFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDQwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJyZWdpc3RyYXRpb24tcGFzc3dvcmQtYWN0aW9uIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogNTAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJhdXRoZW50aWNhdG9yIjogInJlZ2lzdHJhdGlvbi1yZWNhcHRjaGEtYWN0aW9uIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIkRJU0FCTEVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogNjAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiMjMxMzU1M2QtNDIxNi00MzVhLTkxMDMtYTg5ZDI4OGI1ODMxIiwKICAgICAgICAiYWxpYXMiOiAicmVzZXQgY3JlZGVudGlhbHMiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZXNldCBjcmVkZW50aWFscyBmb3IgYSB1c2VyIGlmIHRoZXkgZm9yZ290IHRoZWlyIHBhc3N3b3JkIG9yIHNvbWV0aGluZyIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogdHJ1ZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAicmVzZXQtY3JlZGVudGlhbHMtY2hvb3NlLXVzZXIiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiUkVRVUlSRUQiLAogICAgICAgICAgICAicHJpb3JpdHkiOiAxMCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAicmVzZXQtY3JlZGVudGlhbC1lbWFpbCIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJSRVFVSVJFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDIwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJyZXNldC1wYXNzd29yZCIsCiAgICAgICAgICAgICJyZXF1aXJlbWVudCI6ICJSRVFVSVJFRCIsCiAgICAgICAgICAgICJwcmlvcml0eSI6IDMwLAogICAgICAgICAgICAidXNlclNldHVwQWxsb3dlZCI6IGZhbHNlLAogICAgICAgICAgICAiYXV0aGV0aWNhdG9yRmxvdyI6IGZhbHNlCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiYXV0aGVudGljYXRvciI6ICJyZXNldC1vdHAiLAogICAgICAgICAgICAicmVxdWlyZW1lbnQiOiAiT1BUSU9OQUwiLAogICAgICAgICAgICAicHJpb3JpdHkiOiA0MCwKICAgICAgICAgICAgInVzZXJTZXR1cEFsbG93ZWQiOiBmYWxzZSwKICAgICAgICAgICAgImF1dGhldGljYXRvckZsb3ciOiBmYWxzZQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgewogICAgICAgICJpZCI6ICI0MmI0Y2MzMy1iNGIyLTQwNDktYWYzMy1iZTllN2U1ODY5ODMiLAogICAgICAgICJhbGlhcyI6ICJzYW1sIGVjcCIsCiAgICAgICAgImRlc2NyaXB0aW9uIjogIlNBTUwgRUNQIFByb2ZpbGUgQXV0aGVudGljYXRpb24gRmxvdyIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiYmFzaWMtZmxvdyIsCiAgICAgICAgInRvcExldmVsIjogdHJ1ZSwKICAgICAgICAiYnVpbHRJbiI6IHRydWUsCiAgICAgICAgImF1dGhlbnRpY2F0aW9uRXhlY3V0aW9ucyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImF1dGhlbnRpY2F0b3IiOiAiaHR0cC1iYXNpYy1hdXRoZW50aWNhdG9yIiwKICAgICAgICAgICAgInJlcXVpcmVtZW50IjogIlJFUVVJUkVEIiwKICAgICAgICAgICAgInByaW9yaXR5IjogMTAsCiAgICAgICAgICAgICJ1c2VyU2V0dXBBbGxvd2VkIjogZmFsc2UsCiAgICAgICAgICAgICJhdXRoZXRpY2F0b3JGbG93IjogZmFsc2UKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIF0sCiAgICAiYXV0aGVudGljYXRvckNvbmZpZyI6IFsKICAgICAgewogICAgICAgICJpZCI6ICJkMmE4YmUzYy1hMTI3LTQ0NjItYjgyZC0yY2E2MWRmMWIyYTQiLAogICAgICAgICJhbGlhcyI6ICJjcmVhdGUgdW5pcXVlIHVzZXIgY29uZmlnIiwKICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgInJlcXVpcmUucGFzc3dvcmQudXBkYXRlLmFmdGVyLnJlZ2lzdHJhdGlvbiI6ICJmYWxzZSIKICAgICAgICB9CiAgICAgIH0sCiAgICAgIHsKICAgICAgICAiaWQiOiAiMmFmYjY2MjgtMWI0Mi00ZDRmLTgwYTctY2ZiMDQ3MWJhNjYxIiwKICAgICAgICAiYWxpYXMiOiAicmV2aWV3IHByb2ZpbGUgY29uZmlnIiwKICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgInVwZGF0ZS5wcm9maWxlLm9uLmZpcnN0LmxvZ2luIjogIm1pc3NpbmciCiAgICAgICAgfQogICAgICB9CiAgICBdLAogICAgInJlcXVpcmVkQWN0aW9ucyI6IFsKICAgICAgewogICAgICAgICJhbGlhcyI6ICJDT05GSUdVUkVfVE9UUCIsCiAgICAgICAgIm5hbWUiOiAiQ29uZmlndXJlIFRvdHAiLAogICAgICAgICJwcm92aWRlcklkIjogIkNPTkZJR1VSRV9UT1RQIiwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImRlZmF1bHRBY3Rpb24iOiBmYWxzZSwKICAgICAgICAiY29uZmlnIjoge30KICAgICAgfSwKICAgICAgewogICAgICAgICJhbGlhcyI6ICJVUERBVEVfUEFTU1dPUkQiLAogICAgICAgICJuYW1lIjogIlVwZGF0ZSBQYXNzd29yZCIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiVVBEQVRFX1BBU1NXT1JEIiwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImRlZmF1bHRBY3Rpb24iOiBmYWxzZSwKICAgICAgICAiY29uZmlnIjoge30KICAgICAgfSwKICAgICAgewogICAgICAgICJhbGlhcyI6ICJVUERBVEVfUFJPRklMRSIsCiAgICAgICAgIm5hbWUiOiAiVXBkYXRlIFByb2ZpbGUiLAogICAgICAgICJwcm92aWRlcklkIjogIlVQREFURV9QUk9GSUxFIiwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImRlZmF1bHRBY3Rpb24iOiBmYWxzZSwKICAgICAgICAiY29uZmlnIjoge30KICAgICAgfSwKICAgICAgewogICAgICAgICJhbGlhcyI6ICJWRVJJRllfRU1BSUwiLAogICAgICAgICJuYW1lIjogIlZlcmlmeSBFbWFpbCIsCiAgICAgICAgInByb3ZpZGVySWQiOiAiVkVSSUZZX0VNQUlMIiwKICAgICAgICAiZW5hYmxlZCI6IHRydWUsCiAgICAgICAgImRlZmF1bHRBY3Rpb24iOiBmYWxzZSwKICAgICAgICAiY29uZmlnIjoge30KICAgICAgfSwKICAgICAgewogICAgICAgICJhbGlhcyI6ICJ0ZXJtc19hbmRfY29uZGl0aW9ucyIsCiAgICAgICAgIm5hbWUiOiAiVGVybXMgYW5kIENvbmRpdGlvbnMiLAogICAgICAgICJwcm92aWRlcklkIjogInRlcm1zX2FuZF9jb25kaXRpb25zIiwKICAgICAgICAiZW5hYmxlZCI6IGZhbHNlLAogICAgICAgICJkZWZhdWx0QWN0aW9uIjogZmFsc2UsCiAgICAgICAgImNvbmZpZyI6IHt9CiAgICAgIH0KICAgIF0sCiAgICAiYnJvd3NlckZsb3ciOiAiYnJvd3NlciIsCiAgICAicmVnaXN0cmF0aW9uRmxvdyI6ICJyZWdpc3RyYXRpb24iLAogICAgImRpcmVjdEdyYW50RmxvdyI6ICJkaXJlY3QgZ3JhbnQiLAogICAgInJlc2V0Q3JlZGVudGlhbHNGbG93IjogInJlc2V0IGNyZWRlbnRpYWxzIiwKICAgICJjbGllbnRBdXRoZW50aWNhdGlvbkZsb3ciOiAiY2xpZW50cyIsCiAgICAia2V5Y2xvYWtWZXJzaW9uIjogIjcuMC4wLkdBIgogIH0KXQo=
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: sso-service-account
  secrets:
  - name: sso-app-secret
- apiVersion: v1
  kind: Service
  metadata:
    name: secure-sso
    labels:
      application: sso
      component: server
      app.kubernetes.io/part-of: secured-http-example
      app.kubernetes.io/name: secured-sso
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso
      app.openshift.io/runtime-version: "7.3"
  spec:
    ports:
    - port: 8443
      targetPort: 8443
    selector:
      deploymentConfig: sso
- apiVersion: v1
  kind: Service
  metadata:
    name: sso
    labels:
      application: sso
      component: server
      app.kubernetes.io/part-of: secured-http-example
      app.kubernetes.io/name: secured-sso
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso
      app.openshift.io/runtime-version: "7.3"
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: sso
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: sso
    labels:
      application: sso
      component: server
      app.kubernetes.io/part-of: secured-http-example
      app.kubernetes.io/name: secured-sso
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso
      app.openshift.io/runtime-version: "7.3"
  spec:
    strategy:
      type: Rolling
      rollingParams:
        timeoutSeconds: 10800
    replicas: 1
    selector:
      deploymentConfig: sso
    template:
      metadata:
        name: sso
        labels:
          deploymentConfig: sso
          application: sso
          component: server
      spec:
        serviceAccountName: sso-service-account
        terminationGracePeriodSeconds: 30
        containers:
        - name: sso
          image: registry.access.redhat.com/redhat-sso-7/sso73-openshift
          imagePullPolicy: Always
          volumeMounts:
          - name: sso-demo-volume
            mountPath: "/opt/sso-demo"
            readOnly: true
          - name: eap-keystore-volume
            mountPath: "/etc/eap-secret-volume"
            readOnly: true
          - name: eap-jgroups-keystore-volume
            mountPath: "/etc/jgroups-encrypt-secret-volume"
            readOnly: true
          - name: sso-truststore-volume
            mountPath: "/etc/sso-secret-volume"
            readOnly: true
          # see https://issues.jboss.org/browse/CLOUD-2195
          - name: workaround-for-cloud-2195
            mountPath: /opt/eap/standalone/configuration/standalone_xml_history
          livenessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/livenessProbe.sh"
            initialDelaySeconds: 180
          readinessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/eap/bin/readinessProbe.sh"
          ports:
          - name: jolokia
            containerPort: 8778
            protocol: TCP
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: https
            containerPort: 8443
            protocol: TCP
          env:
          - name: HOSTNAME_HTTP
          - name: HOSTNAME_HTTPS
          - name: SSO_IMPORT_FILE
            value: "/opt/sso-demo/sso-demo.json"
          - name: HTTPS_KEYSTORE_DIR
            value: "/etc/eap-secret-volume"
          - name: HTTPS_KEYSTORE
            value: "keystore.jks"
          - name: HTTPS_KEYSTORE_TYPE
          - name: HTTPS_NAME
            value: "jboss"
          - name: HTTPS_PASSWORD
            value: "mykeystorepass"
          - name: JGROUPS_ENCRYPT_SECRET
            value: "sso-app-secret"
          - name: JGROUPS_ENCRYPT_KEYSTORE_DIR
            value: "/etc/jgroups-encrypt-secret-volume"
          - name: JGROUPS_ENCRYPT_KEYSTORE
            value: "jgroups.jceks"
          - name: JGROUPS_ENCRYPT_NAME
          - name: JGROUPS_ENCRYPT_PASSWORD
          - name: JGROUPS_CLUSTER_PASSWORD
          - name: SSO_SERVICE_USERNAME
          - name: SSO_SERVICE_PASSWORD
          - name: SSO_TRUSTSTORE
          - name: SSO_TRUSTSTORE_DIR
            value: "/etc/sso-secret-volume"
          - name: SSO_TRUSTSTORE_PASSWORD
        volumes:
        - name: sso-demo-volume
          secret:
            secretName: sso-demo-secret
        - name: eap-keystore-volume
          secret:
            secretName: "sso-app-secret"
        - name: eap-jgroups-keystore-volume
          secret:
            secretName: "sso-app-secret"
        - name: sso-truststore-volume
          secret:
            secretName: "sso-app-secret"
        # see https://issues.jboss.org/browse/CLOUD-2195
        - name: workaround-for-cloud-2195
          emptyDir: {}
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Route
  metadata:
    name: secure-sso
    labels:
      application: sso
      component: server
      app.kubernetes.io/part-of: secured-http-example
      app.kubernetes.io/name: secured-sso
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso
      app.openshift.io/runtime-version: "7.3"
  spec:
    to:
      kind: Service
      name: secure-sso
    tls:
      termination: passthrough
- apiVersion: v1
  kind: Route
  metadata:
    name: sso
    labels:
      application: sso
      component: server
      app.kubernetes.io/part-of: secured-http-example
      app.kubernetes.io/name: secured-sso
      app.kubernetes.io/component: backend
      app.openshift.io/runtime: sso
      app.openshift.io/runtime-version: "7.3"
  spec:
    to:
      kind: Service
      name: sso
